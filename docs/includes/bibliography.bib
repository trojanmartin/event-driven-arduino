
@misc{AVRVsArduinoWhich2017,
  title = {{{AVR}} vs {{Arduino-Which}} One Is Right for You?},
  year = {2017},
  month = oct,
  journal = {AVR Geeks},
  abstract = {If you are confused between AVR and Arduino, you don't need to anymore. This article points out the difference between them.},
  langid = {american},
  file = {C\:\\Users\\marti\\Zotero\\storage\\UM2LVA8S\\avr-vs-arduino.html}
}

@misc{bartlettEventually2021,
  title = {Eventually},
  author = {Bartlett, Jonathan},
  year = {2021},
  month = dec,
  abstract = {A library for event-based programming to make Arduino programming more fun and intuitive},
  copyright = {MIT}
}

@inproceedings{bastidePetriNetBased1995,
  title = {A {{Petri Net}} Based {{Environment}} for the {{Design}} of {{Event-driven Interfaces}}.},
  author = {Bastide, R{\'e}mi and Palanque, Philippe},
  year = {1995},
  month = jun,
  volume = {935},
  pages = {66--83},
  doi = {10.1007/3-540-60029-9_34},
  abstract = {Modern window-based user interfaces are actually a special kind of reactive system, and Petri nets may be fruitfully used to design such user \textemdash{} computer dialogues. This paper describes a software engineering tool aimed at supporting the use of high-level Petri nets for the specification, design and implementation of user interfaces in an event-driven interface system. We assess the rationale for the use of Petri nets in such a perspective. We then detail the object-oriented software architecture of the environment, and present an original algorithm for interpreting high-level Petri nets in an event-driven environment.},
  isbn = {978-3-540-60029-9},
  file = {C\:\\Users\\marti\\Zotero\\storage\\43GEBZD3\\Bastide and Palanque - 1995 - A Petri Net based Environment for the Design of Ev.pdf}
}

@misc{cameraNewbieGuideAVR2012,
  title = {Newbie's {{Guide}} to {{AVR Timers}}},
  author = {Camera, Dean},
  year = {2012}
}

@book{dashEventDrivenProgramming2011,
  title = {Event {{Driven Programming}} for {{Embedded Systems-A Finite State Machine Based Approach}}},
  author = {Dash, Nrusingh and Dasgupta, Ranjan and Chepada, J and Halder, A},
  year = {2011},
  month = jan,
  pages = {23}
}

@misc{ElectronicBasics30,
  title = {(3) {{Electronic Basics}} \#30: {{Microcontroller}} ({{Arduino}}) {{Timers}} - {{YouTube}}},
  file = {C\:\\Users\\marti\\Zotero\\storage\\SUXP9679\\watch.html}
}

@misc{FiniteStateMachines,
  title = {Finite {{State Machines}} | {{Brilliant Math}} \& {{Science Wiki}}},
  abstract = {A finite state machine (sometimes called a finite state automaton) is a computation model that can be implemented with hardware or software and can be used to simulate sequential logic and some computer programs. Finite state automata generate regular languages. Finite state machines can be used to model problems in many fields including mathematics, artificial intelligence, games, and linguistics. There are two types of finite state machines (FSMs): deterministic finite state machines, often called \ldots},
  howpublished = {https://brilliant.org/wiki/finite-state-machines/},
  langid = {american},
  file = {C\:\\Users\\marti\\Zotero\\storage\\YMWV5UZM\\finite-state-machines.html}
}

@misc{functionalParadigm,
  title = {What Is Functional Programming? {{Tutorial}} with Example},
  author = {Martin, Matthew},
  year = {2021},
  month = oct
}

@misc{guntherIntroductionMicrocontrollers2007,
  title = {Introduction to {{Microcontrollers}}},
  author = {Gunther, Gridling and Weiss, Bettina},
  year = {2007},
  month = feb,
  publisher = {{Vienna University of Technology}}
}

@misc{imperativParadigm,
  author = {N{\o}rmark, Kurt}
}

@misc{IntroductionMicrocontrollerTimers,
  title = {Introduction to {{Microcontroller Timers}}: {{Periodic Timers}} - {{Technical Articles}}},
  shorttitle = {Introduction to {{Microcontroller Timers}}},
  abstract = {This article, the first in a series on ``timer/counter'' functions in microcontrollers, discusses periodic timers.},
  howpublished = {https://www.allaboutcircuits.com/technical-articles/introduction-to-microcontroller-timers-periodic-timers/},
  langid = {english},
  file = {C\:\\Users\\marti\\Zotero\\storage\\LNSVNRDQ\\introduction-to-microcontroller-timers-periodic-timers.html}
}

@inproceedings{leyva-del-foyoCustomInterruptManagement,
  title = {Custom {{Interrupt Management}} for {{Real-Time}} and {{Embedded System Kernels}} 1},
  author = {{Leyva-del-foyo}, Luis E.},
  abstract = {In this paper, we make an analysis of the traditional model of interrupt management and its incapacity to incorporate reliability and the temporal determinism demanded on real-time systems. As a result of this analysis, we propose a model that integrates interrupts and tasks handling. Also, we make a schedulability analysis to evaluate and distinguish the circumstances under which this integrated model improves the traditional model. Finally, we propose the development of a Custom Interrupt Controller compatible with our integrated model, and its implementation in a FPGA architecture. 1.},
  file = {C\:\\Users\\marti\\Zotero\\storage\\CF4TW7BB\\Leyva-del-foyo - Custom Interrupt Management for Real-Time and Embe.pdf;C\:\\Users\\marti\\Zotero\\storage\\YRDSSE8K\\summary.html}
}

@inproceedings{objectOrientedParadigm,
  title = {Principles of Object-Oriented Programming},
  author = {Blaschek, G{\"u}nther},
  year = {1994}
}

@incollection{regehrSafeStructuredUse2007,
  title = {Safe and {{Structured Use}} of {{Interrupts}} in {{Real-Time}} and {{Embedded Software}}},
  booktitle = {Handbook of {{Real-Time}} and {{Embedded Systems}}},
  author = {Regehr, John},
  editor = {Son, Sang and Lee, Insup and {Y-T. Leung}, Joseph},
  year = {2007},
  month = jul,
  volume = {20073969},
  pages = {16-1-16-12},
  publisher = {{Chapman and Hall/CRC}},
  doi = {10.1201/9781420011746.ch16},
  isbn = {978-1-58488-678-5 978-1-4200-1174-6},
  langid = {english},
  file = {C\:\\Users\\marti\\Zotero\\storage\\K6CC6P55\\Regehr - 2007 - Safe and Structured Use of Interrupts in Real-Time.pdf}
}

@misc{samekStateMachinesEventDriven2016,
  title = {State {{Machines}} for {{Event-Driven Systems}}},
  author = {Samek, Miro},
  year = {2016},
  month = may,
  abstract = {State machines are perhaps the most effective method for developing robust event-driven code for embedded systems.},
  howpublished = {https://barrgroup.com/embedded-systems/how-to/state-machines-event-driven-systems},
  langid = {english},
  file = {C\:\\Users\\marti\\Zotero\\storage\\HSEAQPBI\\state-machines-event-driven-systems.html}
}

@misc{shidlingDifferentTypesMicrocontrollers2020,
  title = {Different {{Types Of Microcontrollers Used In Embedded System}}},
  author = {Shidling, Chetan},
  year = {2020},
  month = sep,
  journal = {CS Electrical \& Electronics},
  abstract = {In this article, I will discuss the different types of microcontrollers used in embedded systems, features of different types of...},
  howpublished = {https://www.cselectricalandelectronics.com/different-types-of-microcontrollers-used-in-embedded-system/},
  langid = {american},
  file = {C\:\\Users\\marti\\Zotero\\storage\\LHEN8BEC\\different-types-of-microcontrollers-used-in-embedded-system.html}
}

@misc{stack-overflow-survey-2020,
  title = {Stack Overflow Developer Survey 2020}
}

@misc{tinkerspyAutomaton2021,
  title = {Automaton},
  author = {Tinkerspy},
  year = {2021},
  month = dec,
  abstract = {Reactive State Machine Framework for Arduino},
  copyright = {MIT},
  keywords = {arduino,automaton}
}

@inproceedings{wangAutomaticDetectionValidation2017,
  title = {Automatic Detection and Validation of Race Conditions in Interrupt-Driven Embedded Software},
  booktitle = {Proceedings of the 26th {{ACM SIGSOFT International Symposium}} on {{Software Testing}} and {{Analysis}}},
  author = {Wang, Yu and Wang, Linzhang and Yu, Tingting and Zhao, Jianhua and Li, Xuandong},
  year = {2017},
  month = jul,
  pages = {113--124},
  publisher = {{ACM}},
  address = {{Santa Barbara CA USA}},
  doi = {10.1145/3092703.3092724},
  abstract = {Interrupt-driven programs are widely deployed in safety-critical embedded systems to perform hardware and resource dependent data operation tasks. The frequent use of interrupts in these systems can cause race conditions to occur due to interactions between application tasks and interrupt handlers. Numerous program analysis and testing techniques have been proposed to detect races in multithreaded programs. Little work, however, has addressed race condition problems related to hardware interrupts. In this paper, we present SDRacer, an automated framework that can detect and validate race conditions in interrupt-driven embedded software. It uses a combination of static analysis and symbolic execution to generate input data for exercising the potential races. It then employs virtual platforms to dynamically validate these races by forcing the interrupts to occur at the potential racing points. We evaluate SDRacer on nine real-world embedded programs written in C language. The results show that SDRacer can precisely detect race conditions.},
  isbn = {978-1-4503-5076-1},
  langid = {english},
  file = {C\:\\Users\\marti\\Zotero\\storage\\MULUP2Y3\\Wang et al. - 2017 - Automatic detection and validation of race conditi.pdf}
}

@misc{WaybackMachine2014,
  title = {Wayback {{Machine}}},
  year = {2014},
  month = mar,
  howpublished = {https://web.archive.org/web/20140327131120/http://www4.ncsu.edu/\textasciitilde drwrigh3/docs/courses/csc216/fsm-notes.pdf},
  file = {C\:\\Users\\marti\\Zotero\\storage\\EJCEK9C2\\2014 - Wayback Machine.pdf}
}

@misc{WhatArduinoArduino,
  title = {What Is {{Arduino}}? | {{Arduino Documentation}}},
  shorttitle = {What Is {{Arduino}}?},
  abstract = {An introduction to what Arduino is, and what it can be used for.},
  howpublished = {https://docs.arduino.cc/learn/starting-guide/whats-arduino},
  file = {C\:\\Users\\marti\\Zotero\\storage\\R9XFI4PK\\whats-arduino.html}
}

@misc{WhatEmbeddedSystem,
  title = {What Is an {{Embedded System}}? {{Definition}} and {{FAQs}} | {{HEAVY}}.{{AI}}},
  shorttitle = {What Is an {{Embedded System}}?},
  abstract = {Learn the definition of Embedded Systems and get answers to FAQs regarding: How an Embedded System Works, Basic Structure of an Embedded System and more.},
  howpublished = {https://www.heavy.ai/technical-glossary/embedded-systems},
  langid = {english},
  file = {C\:\\Users\\marti\\Zotero\\storage\\NZQ8EQLZ\\embedded-systems.html}
}

@article{yadavImpactEventDriven,
  title = {Impact of {{Event Driven Programing Paradigm}} on {{Real World}}},
  author = {Yadav, Himanshu and Paruthi, Rajat and Gupta, Vikram},
  pages = {6},
  abstract = {The real world works according to events. People make unique choices according to the conditions they are put in. In this pap er, an event driven approach is talked about and the impacts it has had on various fields with its evolution. Three of which have been discussed in the paper. At the lower level, basic sequences are coded in elementary software objects called function blocks which prove their functionality when called or used. At the upper level, the execution of such blocks is carried out according to the desired sequences forced by a controller. The interaction of the user with the computer used to be limited to the sequential file, this all changed with the arrival of event driven programs the user can now engage the computer while it is running ot her tasks.},
  langid = {english},
  file = {C\:\\Users\\marti\\Zotero\\storage\\QYYXJVN8\\Yadav et al. - Impact of Event Driven Programing Paradigm on Real.pdf}
}


