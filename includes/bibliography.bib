
@online{FiniteStateMachines,
  title = {Finite {{State Machines}} | {{Brilliant Math}} \& {{Science Wiki}}},
  url = {https://brilliant.org/wiki/finite-state-machines/},
  urldate = {2022-01-04},
  abstract = {A finite state machine (sometimes called a finite state automaton) is a computation model that can be implemented with hardware or software and can be used to simulate sequential logic and some computer programs. Finite state automata generate regular languages. Finite state machines can be used to model problems in many fields including mathematics, artificial intelligence, games, and linguistics. There are two types of finite state machines (FSMs): deterministic finite state machines, often called …},
  langid = {american},
  file = {C\:\\Users\\marti\\Zotero\\storage\\YMWV5UZM\\finite-state-machines.html}
}

@misc{functionalParadigm,
  title = {What Is Functional Programming? {{Tutorial}} with Example},
  author = {Martin, Matthew},
  date = {2021-10},
  url = {https://www.guru99.com/functional-programming-tutorial.html}
}

@misc{imperativParadigm,
  author = {Nørmark, Kurt},
  url = {http://people.cs.aau.dk/~normark/prog3-03/html/notes/paradigms_themes-paradigm-overview-section.html}
}

@inproceedings{leyva-del-foyoCustomInterruptManagement,
  title = {Custom {{Interrupt Management}} for {{Real-Time}} and {{Embedded System Kernels}} 1},
  author = {Leyva-del-foyo, Luis E.},
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7025&rep=rep1&type=pdf},
  abstract = {In this paper, we make an analysis of the traditional model of interrupt management and its incapacity to incorporate reliability and the temporal determinism demanded on real-time systems. As a result of this analysis, we propose a model that integrates interrupts and tasks handling. Also, we make a schedulability analysis to evaluate and distinguish the circumstances under which this integrated model improves the traditional model. Finally, we propose the development of a Custom Interrupt Controller compatible with our integrated model, and its implementation in a FPGA architecture. 1.},
  file = {C\:\\Users\\marti\\Zotero\\storage\\CF4TW7BB\\Leyva-del-foyo - Custom Interrupt Management for Real-Time and Embe.pdf;C\:\\Users\\marti\\Zotero\\storage\\YRDSSE8K\\summary.html}
}

@inproceedings{objectOrientedParadigm,
  title = {Principles of Object-Oriented Programming},
  author = {Blaschek, Günther},
  date = {1994}
}

@incollection{regehrSafeStructuredUse2007,
  title = {Safe and {{Structured Use}} of {{Interrupts}} in {{Real-Time}} and {{Embedded Software}}},
  booktitle = {Handbook of {{Real-Time}} and {{Embedded Systems}}},
  author = {Regehr, John},
  editor = {Son, Sang and Lee, Insup and Y-T. Leung, Joseph},
  date = {2007-07-23},
  series = {Chapman \& {{Hall}}/{{CRC Computer}} \& {{Information Science Series}}},
  volume = {20073969},
  pages = {16-1-16-12},
  publisher = {{Chapman and Hall/CRC}},
  doi = {10.1201/9781420011746.ch16},
  url = {http://www.crcnetbase.com/doi/abs/10.1201/9781420011746.ch16},
  urldate = {2021-12-28},
  isbn = {978-1-58488-678-5 978-1-4200-1174-6},
  langid = {english},
  file = {C\:\\Users\\marti\\Zotero\\storage\\K6CC6P55\\Regehr - 2007 - Safe and Structured Use of Interrupts in Real-Time.pdf}
}

@misc{stack-overflow-survey-2020,
  title = {Stack Overflow Developer Survey 2020},
  url = {https://insights.stackoverflow.com/survey/2020}
}

@inproceedings{wangAutomaticDetectionValidation2017,
  title = {Automatic Detection and Validation of Race Conditions in Interrupt-Driven Embedded Software},
  booktitle = {Proceedings of the 26th {{ACM SIGSOFT International Symposium}} on {{Software Testing}} and {{Analysis}}},
  author = {Wang, Yu and Wang, Linzhang and Yu, Tingting and Zhao, Jianhua and Li, Xuandong},
  date = {2017-07-10},
  pages = {113--124},
  publisher = {{ACM}},
  location = {{Santa Barbara CA USA}},
  doi = {10.1145/3092703.3092724},
  url = {https://dl.acm.org/doi/10.1145/3092703.3092724},
  urldate = {2021-12-27},
  abstract = {Interrupt-driven programs are widely deployed in safety-critical embedded systems to perform hardware and resource dependent data operation tasks. The frequent use of interrupts in these systems can cause race conditions to occur due to interactions between application tasks and interrupt handlers. Numerous program analysis and testing techniques have been proposed to detect races in multithreaded programs. Little work, however, has addressed race condition problems related to hardware interrupts. In this paper, we present SDRacer, an automated framework that can detect and validate race conditions in interrupt-driven embedded software. It uses a combination of static analysis and symbolic execution to generate input data for exercising the potential races. It then employs virtual platforms to dynamically validate these races by forcing the interrupts to occur at the potential racing points. We evaluate SDRacer on nine real-world embedded programs written in C language. The results show that SDRacer can precisely detect race conditions.},
  eventtitle = {{{ISSTA}} '17: {{International Symposium}} on {{Software Testing}} and {{Analysis}}},
  isbn = {978-1-4503-5076-1},
  langid = {english},
  file = {C\:\\Users\\marti\\Zotero\\storage\\MULUP2Y3\\Wang et al. - 2017 - Automatic detection and validation of race conditi.pdf}
}

@online{WaybackMachine2014,
  title = {Wayback {{Machine}}},
  date = {2014-03-27},
  url = {https://web.archive.org/web/20140327131120/http://www4.ncsu.edu/~drwrigh3/docs/courses/csc216/fsm-notes.pdf},
  urldate = {2022-01-04},
  file = {C\:\\Users\\marti\\Zotero\\storage\\EJCEK9C2\\2014 - Wayback Machine.pdf}
}


